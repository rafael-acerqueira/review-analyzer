from __future__ import annotations

from typing import Optional, Protocol, runtime_checkable
from app.domain.auth.entities import UserEntity

@runtime_checkable
class UserRepository(Protocol):

    def get_by_email(self, email: str) -> Optional[UserEntity]: ...
    def get_by_id(self, user_id: int) -> Optional[UserEntity]: ...
    def exists_email(self, email: str) -> bool: ...
    def create_local(self, *, email: str, hashed_password: str) -> UserEntity: ...
    def upsert_google_user(self, *, email: str, sub: str) -> UserEntity: ...
    def update_google_sub_if_needed(self, *, user_id: int, sub: str) -> Optional[UserEntity]: ...


@runtime_checkable
class TokenProvider(Protocol):
    def create_access_token(self, user_id: int) -> str: ...
    def create_refresh_token(self, user_id: int) -> str: ...
    def decode_refresh_token(self, token: str) -> dict: ...


__all__ = ["UserRepository", "TokenProvider"]
